class RallyUtils

types 
	public String = seq of char;
	public Date :: year : nat1
								month: nat1
								day : nat1
								inv d == d.month <= 12 and d.month >= 1 and
								d.day <= amountDaysInMonth(d.year, d.month);
	
functions

	public amountDaysInMonth(year:nat1, month:nat1) res : nat1 ==
	(
		if leapYear(year) and month = 2 then 29
		else if month in set {1,3,5,7,8,10,12} then 31
		else if month in set {4,6,9,11} then 30
		else 28
	)
	pre month >= 1 and month <= 12;
		
	public static leapYear(year: nat1) res : bool ==
		year mod 400 = 0 or
		year mod 4 = 0 and year mod 100 <> 0; 
		
	public static equalDate(date1:Date, date2:Date) res : bool == 
	(
		if date1.year <> date2.year then false
		else
			if date1.month <> date2.month then false
			else 
				if date1.day <> date2.day then false 
				else true
	);
		

	/*
	public static checkIfExistsInSet(name: String, elem:)
	checkIfExistsInSet(name, sequence) == 
	(
		forall competition in set sequence 
		(
			if equalString(name, competition.getName())
			then competition else nil
		)
		
		
	);
	*/
	
	
operations

	public static checkIfExistsCompetition: String * set of Competition ==> ?
	checkIfExistsCompetition(name, sequence) == 
	(
		for all competition in set sequence do
		(
			if equalString(name, competition.getName())
			then return competition;
		);
		
		return nil;
	);
	
	public static checkIfExistsTrack: String * set of Track ==> ?
	checkIfExistsTrack(name, sequence) ==
	(
		for all track in set sequence do
		(
			if equalString(name, track.getName())
			then return track;
		);
		return nil;
	);
	
	public static checkIfExistsRace: String * set of Race ==> ?
	checkIfExistsRace(name, sequence) ==
	(
		for all race in set sequence do
		(
			if equalString(name, race.getName())
			then return race;
		);
		return nil;
	);
	
	public static checkIfExistsTrackInRace: String * set of Race ==> ?
	checkIfExistsTrackInRace(name, sequence) == 
	(
		for all race in set sequence do
		(
			dcl track : Track := race.getTrack();
			
			if equalString(name, track.getName())
			then return race;
		);
		return nil;
	);
	
	public static equalString: String * String ==> bool
	equalString(name, compName) == 
	(
		if len name <> len compName then return false;
		
		for i = 1 to len name by 1 do
		(
			if name(i) <> compName(i) then return false;
		); 
		return true
	);
	

end RallyUtils






