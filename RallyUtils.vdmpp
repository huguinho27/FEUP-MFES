/**
 *	RallyUtils, usefull functions and operations for the project.
 */
class RallyUtils

types 
	public String = seq of char;
	
	--type date, with invariant restricting a valid date
	public Date :: year : nat1
								month: nat1
								day : nat1
								inv d == d.month <= 12 and d.month >= 1 and
								d.day <= amountDaysInMonth(d.year, d.month);	
functions

	/**
	 *	amountDaysInMonth, returns the total ammount of days in a given month from a given year.
	 */
	public amountDaysInMonth: nat1 * nat1 -> nat1 
	amountDaysInMonth(year, month) ==
	(
		if leapYear(year) and month = 2 then 29
		else if month in set {1,3,5,7,8,10,12} then 31
		else if month in set {4,6,9,11} then 30
		else 28
	)
	pre month >= 1 and month <= 12;
		
	/**
	 *	leapYear, checks if a given year is leap or common.
	 */
	public static leapYear: nat1 -> bool 
	leapYear(year) ==
		year mod 400 = 0 or
		year mod 4 = 0 and year mod 100 <> 0; 
		
	/**
	 *	equalDate, tests if two dates are equal.
	 */
	public static equalDate: Date * Date -> bool
	equalDate(date1, date2) ==
	(
		if date1.year <> date2.year then false
		else
			if date1.month <> date2.month then false
			else 
				if date1.day <> date2.day then false 
				else true
	);
	
	/**
	 *	isDateLowerThanDate, tests if one date is lower than other.
	 */
	public static isDateLowerThanDate: Date * Date -> bool
	isDateLowerThanDate(date1, date2) ==
	(
		if date1.year < date2.year then true
		else
			if date1.year > date2.year then false
			else
				if date1.month < date2.month then true
				else 
					if date1.month > date2.month then false
					else 
						if date1.day < date2.day then true
						else false
	);
	
	
operations

	/**
	 *	checkIfExistsCompetition, checks if a Competition already exists in a set of Competition.
	 */
	public static checkIfExistsCompetition: String * set of Competition ==> ?
	checkIfExistsCompetition(name, sequence) == 
	(
		for all competition in set sequence do
		(
			if equalString(name, competition.getName())
			then return competition;
		);
		
		return nil;
	);
	
	
	/**
	 *	checkIfExistsTrack, checks if a given Track exists in a set of Track.
	 */
	public static checkIfExistsTrack: String * set of Track ==> ?
	checkIfExistsTrack(name, sequence) ==
	(
		for all track in set sequence do
		(
			if equalString(name, track.getName())
			then return track;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsRace, checks if a given Race exists in a set of Race.
	 */
	public static checkIfExistsRace: String * set of Race ==> ?
	checkIfExistsRace(name, sequence) ==
	(
		for all race in set sequence do
		(
			if equalString(name, race.getName())
			then return race;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsPilot, checks if a given Pilot exists in a set of Pilot.
	 */
	public static checkIfExistsPilot: String * set of Pilot ==> ?
	checkIfExistsPilot(name, sequence) ==
	(
		for all obj in set sequence do
		(
			if equalString(name, obj.getName())
			then return obj;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsTeam, checks if a given Team exists in a set of Team.
	 */
	public static checkIfExistsTeam: String * set of Team ==> ?
	checkIfExistsTeam(name, sequence) ==
	(
		for all obj in set sequence do
		(
			if equalString(name, obj.getName())
			then return obj;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsSponsor, checks if a given Sponsor exists in a set of Sponsor.
	 */
	public static checkIfExistsSponsor: String * set of Sponsor ==> ?
	checkIfExistsSponsor(name, sequence) ==
	(
		for all obj in set sequence do
		(
			if equalString(name, obj.getName())
			then return obj;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsVehicle, checks if a given Vehicle exists in a set of Vehicle.
	 */
	public static checkIfExistsVehicle: String * set of Vehicle ==> ?
	checkIfExistsVehicle(name, sequence) ==
	(
		for all obj in set sequence do
		(
			if equalString(name, obj.getName())
			then return obj;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsParticipant, checks if a given Participant exists in a set of Participant.
	 */
	public static checkIfExistsParticipant: String * set of Participant ==> ?
	checkIfExistsParticipant(name, sequence) ==
	(
		for all obj in set sequence do
		(
			if equalString(name, obj.getPilot().getName())
			then return obj;
		);
		return nil;
	);
	
	/**
	 *	checkIfExistsTrackInRace, checks if a given Track exists in a Race, from a set of Race.
	 */
	public static checkIfExistsTrackInRace: String * set of Race ==> ?
	checkIfExistsTrackInRace(name, sequence) == 
	(
		for all race in set sequence do
		(
			dcl track : Track := race.getTrack();
			
			if equalString(name, track.getName())
			then return race;
		);
		return nil;
	);
	
	/**
	 *	equalString, checks if two String are equal.
	 */
	public static equalString: String * String ==> bool
	equalString(name, compName) == 
	(
		if len name <> len compName then return false;
		
		for i = 1 to len name by 1 do
		(
			if name(i) <> compName(i) then return false;
		); 
		return true
	);
	
	public static getDateString: Date ==> String
	getDateString(date) ==
	(
			dcl dateStr : String := "";
			dateStr := dateStr ^ VDMUtil`val2seq_of_char[nat1](date.year);
			dateStr := dateStr ^ "-";
			dateStr := dateStr ^ VDMUtil`val2seq_of_char[nat1](date.month);
			dateStr := dateStr ^ "-";
			dateStr := dateStr ^ VDMUtil`val2seq_of_char[nat1](date.day);
			return dateStr;
	);
	

end RallyUtils






