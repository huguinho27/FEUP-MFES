/** 
 * TestRally, Test class from the exapmle.
 */
class TestRally

operations

	/** 
	 * assertEqual, test expected vs. actual value.
	 */
	protected assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
  			IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
		)
	post expected = actual;
	
	/** 
	 * main function, runs all the tests.
	 */
	public static main: () ==> ()
	main() == 
	(
			dcl testClass : TestRally := new TestRally();
			IO`print("Rally Test"); 		
			testClass.testDates();	
			testClass.testRallyCreation();
			testClass.testAddAndDeleteCompetition();
			testClass.testAddAndDeleteTrack();
			testClass.testAddAndDeleteRace();
			testClass.testAddAndDeletePilot();
			testClass.testAddAndDeleteVehicle();
			testClass.testAddAndDeleteSponsor();
			testClass.testAddAndDeleteTeam();
			testClass.testAddAndDeltePilotInTeam();
			testClass.testAddAndDeleteSponsorInTeam();
			testClass.testAddAndDeleteVehicleInTeam();
			testClass.testAddAndDeleteParticipantResult();
			testClass.testCalendar();
			testClass.testResults();
	
	);
	
	public testDates: () ==> ()
	testDates() ==
	(	
			dcl date1 : RallyUtils`Date := mk_RallyUtils`Date(2017, 01, 21);
			dcl date2 : RallyUtils`Date := mk_RallyUtils`Date(2017, 01, 21);
			dcl date3 : RallyUtils`Date := mk_RallyUtils`Date(2017, 01, 22);
			dcl date4 : RallyUtils`Date := mk_RallyUtils`Date(2017, 02, 21);
			dcl date5 : RallyUtils`Date := mk_RallyUtils`Date(2018, 01, 21);
			
			--test equal
			assertEqual(RallyUtils`equalDate(date1, date2), true);
			
			--test equal, not true in day
			assertEqual(RallyUtils`equalDate(date1, date3), false);
			
			--test equal, not true in month
			assertEqual(RallyUtils`equalDate(date1, date4), false);
		
			--test equal, not true in year
			assertEqual(RallyUtils`equalDate(date1, date5), false);
			
			--test date lower (equal dates)
			assertEqual(RallyUtils`isDateLowerThanDate(date1, date2), false);
			assertEqual(RallyUtils`isDateLowerThanDate(date1, date2), false);
			
			--test date lower (different year)
			assertEqual(RallyUtils`isDateLowerThanDate(date5, date1), false);
			assertEqual(RallyUtils`isDateLowerThanDate(date1, date5), true);
			
			--test date lower (different month)
			assertEqual(RallyUtils`isDateLowerThanDate(date3, date4), true);
			assertEqual(RallyUtils`isDateLowerThanDate(date4, date3), false);
			
			--test date lower (different day)
			assertEqual(RallyUtils`isDateLowerThanDate(date2, date3), true);
			assertEqual(RallyUtils`isDateLowerThanDate(date3, date2), false);
			
			
	);

	/** 
	 * testRallyCreation, tests the creation of the application itself.
	 */
	public testRallyCreation: () ==> ()
	testRallyCreation() == 
	(
			dcl rally: Rally := new Rally();
			assertEqual(isofclass(Rally, rally), true);	
	);
	
	/** 
	 * testsAddAndDeleteCompetition, tests the creation, insertion and deletion of Competitions.
	 */
	public testAddAndDeleteCompetition: () ==> ()
	testAddAndDeleteCompetition() == 
	(
			dcl rally: Rally := new Rally();
		
			--testing adding new competition, and adding the same with diferente description
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Competition, rally.addCompetition("f1", "formula 1")), true);
			assertEqual(rally.addCompetition("wrc", "comar"), false);
			
			--testing delete and delete again
			assertEqual({} subset rally.deleteCompetition("wrc"), true);
			assertEqual(rally.deleteCompetition("wrc"), false);
	);
	
	/** 
	 * testsAddAndDeleteTrack, tests the creation, insertion and deletion of Tracks.
	 */
	public testAddAndDeleteTrack: () ==> ()
	testAddAndDeleteTrack() == 
	(
			dcl rally: Rally := new Rally();
			
			--testing adding track
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), false);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			
			--testing delete and delete again
			assertEqual(rally.deleteTrack("montecarlo"), true);
			assertEqual(rally.deleteTrack("montecarlo"), false);
	);
	
	/** 
	 * testsAddAndDeleteRace, tests the creation, insertion and deletion of Races.
	 */
	public testAddAndDeleteRace: () ==> ()
	testAddAndDeleteRace() ==
	(
			dcl rally: Rally := new Rally();
				
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			
			--test add non existing values
			assertEqual(rally.addRaceToCompetition("cabomRace", "cabomCompetition", "cabomTrack", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(rally.addRaceToCompetition("cabomRace", "wrc", "cabomTrack", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(rally.addRaceToCompetition("cabomRace", "cabomCompetition", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			
			--real add
			assertEqual(isofclass(Race, rally.addRaceToCompetition("cabomRace", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31))), true);
			
			--already exists test
			assertEqual(rally.addRaceToCompetition("cabomRace", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			
			--test date conflicts
			assertEqual(rally.addRaceToCompetition("cabomRaceOther", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(rally.addRaceToCompetition("cabomRaceOther", "wrc", "estoril", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("cabomRaceOther", "wrc", "montecarlo", mk_RallyUtils`Date(2018,01,01))), true);
			
			--test deleteTrack
			assertEqual(isofclass(Race, rally.deleteTrack("montecarlo")), true);
			
			--test deleteRace
			assertEqual(rally.deleteRace("cabomRaceOther"), true);
			assertEqual(rally.deleteRace("cabomRace"), true);
			assertEqual(rally.deleteRace("cabomRace"), false);
			assertEqual(rally.deleteRace("otherRace"), false);
			
			--test deleteTrack again
			assertEqual(rally.deleteTrack("montecarlo"), true);
	);
	
	/** 
	 * testsAddAndDeletePilot, tests the creation, insertion and deletion of Pilots.
	 */
	public testAddAndDeletePilot: () ==> ()
	testAddAndDeletePilot() == 
	(
			dcl rally: Rally := new Rally();
		
			--testing adding new pilot, adding the same with diferent values, and adding other
			assertEqual(isofclass(Pilot, rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 12,31), "Male")), true);
			assertEqual(rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 11,30), "Female"), false);
			assertEqual(isofclass(Pilot, rally.addPilot("Mariana Figueiredo", mk_RallyUtils`Date(1996, 02,28), "Female")), true);
			
			--deleting pilots
			assertEqual(rally.deletePilot("Miguel Alves"), true);
			assertEqual(rally.deletePilot("Mariana Figueiredo"), true);
			assertEqual(rally.deletePilot("Miguel Alves"), false);
			assertEqual(rally.deletePilot("Mariana Figueiredo"), false);
	);
	
	/** 
	 * testsAddAndDeleteVehicle, tests the creation, insertion and deletion of Vehicles.
	 */
	public testAddAndDeleteVehicle: () ==> ()
	testAddAndDeleteVehicle() == 
	(
			dcl rally: Rally := new Rally();
			
			--testing adding new vehicle, adding the same with diferent values, and adding other
			assertEqual(isofclass(Vehicle, rally.addVehicle("carrao", "bmw", "gtx", "tr-23-23")), true);
			assertEqual(rally.addVehicle("carrao", "porsche", "911", "tu-12-13"), false);
			assertEqual(isofclass(Vehicle, rally.addVehicle("espetaculo", "bmw", "gtx", "tr-23-42")), true);
			
		
			--deleting pilots
			assertEqual(rally.deleteVehicle("carrao"), true);
			assertEqual(rally.deleteVehicle("espetaculo"), true);
			assertEqual(rally.deleteVehicle("carrao"), false);
			assertEqual(rally.deleteVehicle("espetaculo"), false);
	);
	
	/** 
	 * testsAddAndDeleteSponsor, tests the creation, insertion and deletion of Sponsors.
	 */
	public testAddAndDeleteSponsor: () ==> ()
	testAddAndDeleteSponsor() ==
	(
			dcl rally: Rally := new Rally();
	
			--testing adding new sponsor, adding the same with diferent values, and adding other
			assertEqual(isofclass(Sponsor, rally.addSponsor("michellin", "pneus e tal..")), true);
			assertEqual(rally.addSponsor("michellin", "pneus e tal.. e mais umas"), false);
			assertEqual(isofclass(Sponsor, rally.addSponsor("continental", "mais pneus e tal..")), true);
			
			--deleting pilots
			assertEqual(rally.deleteSponsor("michellin"), true);
			assertEqual(rally.deleteSponsor("continental"), true);
			assertEqual(rally.deleteSponsor("michellin"), false);
			assertEqual(rally.deleteSponsor("continental"), false);
	);
	
	/** 
	 * testsAddAndDeleteTeam, tests the creation, insertion and deletion of Teams.
	 */
	public testAddAndDeleteTeam: () ==> ()
	testAddAndDeleteTeam() ==
	(
			dcl rally: Rally := new Rally();
	
			--testing adding new sponsor, adding the same with diferent values, and adding other
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			assertEqual(rally.addTeam("ferrari"), false);
			assertEqual(isofclass(Team, rally.addTeam("red bull")), true);
			
			--deleting Teams
			assertEqual(rally.deleteTeam("ferrari"), true);
			assertEqual(rally.deleteTeam("red bull"), true);
			assertEqual(rally.deleteTeam("ferrari"), false);
			assertEqual(rally.deleteTeam("red bull"), false);
	);
	
	/** 
	 * testsAddAndDeletePilotInTeam, tests the creation, insertion and deletion of Pilots in Teams.
	 */
	public testAddAndDeltePilotInTeam: () ==> ()
	testAddAndDeltePilotInTeam() ==
	(
			dcl rally: Rally := new Rally();
				
			--add team and pilot
			assertEqual(isofclass(Pilot, rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 12,31), "Male")), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addPilotToTeam("ferreira", "red bull"), false);
			assertEqual(rally.addPilotToTeam("Miguel Alves", "red bull"), false);
			assertEqual(rally.addPilotToTeam("ferreira", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addPilotToTeam("Miguel Alves", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deletePilotFromTeam("Miguel Alves", "red bull"), false);
			assertEqual(rally.deletePilotFromTeam("ferreira", "ferrari"), false);
			assertEqual(rally.deletePilotFromTeam("Miguel Alves", "ferrari"), true);
	);
	
	/** 
	 * testsAddAndDeleteSponsorInTeam, tests the creation, insertion and deletion of Sponsors in Teams.
	 */
	public testAddAndDeleteSponsorInTeam: () ==> ()
	testAddAndDeleteSponsorInTeam() ==
	(
			dcl rally: Rally := new Rally();
	
			--add team and sponsor
			assertEqual(isofclass(Sponsor, rally.addSponsor("Michellin", "fazem pneus")), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addSponsorToTeam("continental", "red bull"), false);
			assertEqual(rally.addSponsorToTeam("Michellin", "red bull"), false);
			assertEqual(rally.addSponsorToTeam("continental", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addSponsorToTeam("Michellin", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deleteSponsorFromTeam("Michellin", "red bull"), false);
			assertEqual(rally.deleteSponsorFromTeam("ferreira", "ferrari"), false);
			assertEqual(rally.deleteSponsorFromTeam("Michellin", "ferrari"), true);

	);
	
	/** 
	 * testsAddAndDeleteVehicleInTeam, tests the creation, insertion and deletion of Vehicles in Teams.
	 */
	public testAddAndDeleteVehicleInTeam: () ==> ()
	testAddAndDeleteVehicleInTeam() ==
	(
			dcl rally: Rally := new Rally();
			
			--add vehicle and team
			assertEqual(isofclass(Vehicle, rally.addVehicle("carrao", "maclaren", "p8", "ii-99-99")), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addVehicleToTeam("carraozito", "red bull"), false);
			assertEqual(rally.addVehicleToTeam("carrao", "red bull"), false);
			assertEqual(rally.addVehicleToTeam("carraozito", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addVehicleToTeam("carrao", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deleteVehicleFromTeam("carraozito", "red bull"), false);
			assertEqual(rally.deleteVehicleFromTeam("carrao", "red bull"), false);
			assertEqual(rally.deleteVehicleFromTeam("carrao", "ferrari"), true);		
	);
	
	/** 
	 * testsAddAndDeleteParticipantResult, tests the creation, insertion and deletion of Participants and Results.
	 */
	public testAddAndDeleteParticipantResult: () ==> ()
	testAddAndDeleteParticipantResult() ==
	(
		 	--setParticipantResultInRace(raceName, pilotName, vehicleName, teamName, resultTime) 
			dcl rally: Rally := new Rally();
			
			--add values
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race1", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race2", "wrc", "estoril", mk_RallyUtils`Date(2017, 01, 01))), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			assertEqual(isofclass(Team, rally.addTeam("red bull")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(rally.deletePilot("Miguel Alves"), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Ines Ferreira", mk_RallyUtils`Date(1996, 11,30), "Female")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro1", "mclaren", "p8", "99-00-11")), true);
			assertEqual(rally.deleteVehicle("carro1"), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro1", "mclaren", "p8", "99-00-11")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro2", "mclaren", "p8", "99-00-22")), true);
			assertEqual(isofclass(Sponsor,rally.addSponsor("michelin", "fazem pneus")), true);
			assertEqual(rally.deleteSponsor("michelin"), true);
			assertEqual(isofclass(Sponsor,rally.addSponsor("michelin", "fazem pneus")), true);
			assertEqual(rally.addSponsorToTeam("michelin", "ferrari"),true);
			assertEqual(rally.deleteSponsorFromTeam("michelin", "ferrari"),true);
			assertEqual(rally.addSponsorToTeam("michelin", "ferrari"),true);
			
			--testing function with non-existing values
			assertEqual(rally.setParticipantResultInRace("race", "piloto", "carro", "equipa", 123), false);
			assertEqual(rally.setParticipantResultInRace("race1", "piloto", "carro", "equipa", 123), false);
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro", "equipa", 123), false);
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro1", "equipa", 123), false);
			
			--testing if pilot is in team and vehicle in team
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro1", "ferrari", 123), false);
			assertEqual(rally.addPilotToTeam("Miguel Alves", "ferrari"), true);
			assertEqual(rally.deletePilotFromTeam("Miguel Alves", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Miguel Alves", "ferrari"), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro1", "ferrari", 123), false);
			assertEqual(rally.addVehicleToTeam("carro1", "ferrari"), true);
			assertEqual(rally.deleteVehicleFromTeam("carro1", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro1", "ferrari"), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro1", "ferrari", 123), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Miguel Alves", "carro1", "ferrari", 123), false);
			assertEqual(rally.addPilotToTeam("Ines Ferreira", "ferrari"), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Ines Ferreira", "carro1", "ferrari", 123), false);
			assertEqual(rally.addVehicleToTeam("carro2", "ferrari"), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Ines Ferreira", "carro2", "ferrari", 123), true);
			
			--testing in other competitions
			assertEqual(isofclass(Competition, rally.addCompetition("f1", "formula 1")), true);
			assertEqual(isofclass(Track, rally.addTrack("cologne", "alemanha", 555)), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race3", "f1", "cologne", mk_RallyUtils`Date(2017, 12,31))), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Ines Ferreira", "carro2", "ferrari", 123), false);
			assertEqual(isofclass(Pilot,rally.addPilot("Ruben Barriquello", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(rally.addPilotToTeam("Ruben Barriquello", "ferrari"), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Ruben Barriquello", "carro2", "ferrari", 123), false);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro3", "mclaren", "p8", "99-00-22")), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Ruben Barriquello", "carro3", "ferrari", 123), false);
			
			--attempting to delete vehicle, team and pilot
			assertEqual(rally.deletePilot("Miguel Alves"), false);
			assertEqual(rally.deleteVehicle("carro1"), false);
			assertEqual(rally.deleteTeam("ferrari"), false);
			
			--attempting to delete Results
			assertEqual(rally.deletePilotParticipantFromRace("Michaella", "race4"), false);
			assertEqual(rally.deletePilotParticipantFromRace("Miguel Alves", "race4"), false);
			assertEqual(rally.deletePilotParticipantFromRace("Michaella", "race1"), false);
			assertEqual(rally.deletePilotParticipantFromRace("Miguel Alves", "race1"), true);
			
			--testing listing
			rally.listResults("eventName");
			rally.listCalendar();
			rally.listApplication();
			
	);
	
	
	/** 
	 * testCalendar, tests the listing of the calendar.
	 */
	public testCalendar: () ==> ()
	testCalendar() ==
	(
			dcl rally: Rally := new Rally();
			
			--adding races
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Competition, rally.addCompetition("f1", "formula 1")), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race1", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 01))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race2", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 02))), true);		
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race3", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 04))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race4", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 03))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race5", "f1", "estoril", mk_RallyUtils`Date(2017, 01, 03))), true);
		
			rally.listCalendar();
	);
	
	public testResults: () ==> ()
	testResults() ==
	(
			dcl rally: Rally := new Rally();
			
			--adding races
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Competition, rally.addCompetition("f1", "formula 1")), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race1", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 01))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race2", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 02))), true);		
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race3", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 04))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race4", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 01, 03))), true);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("race5", "f1", "estoril", mk_RallyUtils`Date(2017, 01, 03))), true);
			
			--adding team, pilots and vehicles
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			assertEqual(isofclass(Pilot,rally.addPilot("Abel_Aguiar", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Bruno_Bala", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Carlos_Cruz", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Diogo_Delgado", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Ernesto_Esmeraldo", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Fernando_Fernandes", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Guilherme_Goncalves", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Hugo_Helicopetero", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Ilias_Igual", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Joao_Julio", mk_RallyUtils`Date(1996, 11,30), "Male")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Karmen_Karpito", mk_RallyUtils`Date(1996, 11,30), "Female")), true);
			assertEqual(isofclass(Pilot,rally.addPilot("Lumiar_Luminosa", mk_RallyUtils`Date(1996, 11,30), "Female")), true);
			
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro1", "mclaren", "p8", "99-00-01")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro2", "mclaren", "p8", "99-00-02")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro3", "mclaren", "p8", "99-00-03")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro4", "mclaren", "p8", "99-00-04")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro5", "mclaren", "p8", "99-00-05")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro6", "mclaren", "p8", "99-00-06")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro7", "mclaren", "p8", "99-00-07")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro8", "mclaren", "p8", "99-00-08")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro9", "mclaren", "p8", "99-00-09")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro10", "mclaren", "p8", "99-00-10")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro11", "mclaren", "p8", "99-00-11")), true);
			assertEqual(isofclass(Vehicle,rally.addVehicle("carro12", "mclaren", "p8", "99-00-12")), true);
			
			assertEqual(rally.addPilotToTeam("Abel_Aguiar", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Bruno_Bala", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Carlos_Cruz", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Diogo_Delgado", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Ernesto_Esmeraldo", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Fernando_Fernandes", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Guilherme_Goncalves", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Hugo_Helicopetero", "ferrari"), true);
			assertEqual(rally.addPilotToTeam("Ilias_Igual", "ferrari"), true);		
			assertEqual(rally.addPilotToTeam("Joao_Julio", "ferrari"), true);		
			assertEqual(rally.addPilotToTeam("Karmen_Karpito", "ferrari"), true);		
			assertEqual(rally.addPilotToTeam("Lumiar_Luminosa", "ferrari"), true);
			
			assertEqual(rally.addVehicleToTeam("carro1", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro2", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro3", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro4", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro5", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro6", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro7", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro8", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro9", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro10", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro11", "ferrari"), true);
			assertEqual(rally.addVehicleToTeam("carro12", "ferrari"), true);
			
			
			--adding results to race1
			assertEqual(rally.setParticipantResultInRace("race1", "Abel_Aguiar", "carro1", "ferrari", 413), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Bruno_Bala", "carro2", "ferrari", 465), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Carlos_Cruz", "carro3", "ferrari", 233), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Diogo_Delgado", "carro4", "ferrari", 452), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Ernesto_Esmeraldo", "carro5", "ferrari", 380), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Fernando_Fernandes", "carro6", "ferrari", 348), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Guilherme_Goncalves", "carro7", "ferrari", 311), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Hugo_Helicopetero", "carro8", "ferrari", 311), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Ilias_Igual", "carro9", "ferrari", 258), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Joao_Julio", "carro10", "ferrari", 413), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Karmen_Karpito", "carro11", "ferrari", 426), true);
			assertEqual(rally.setParticipantResultInRace("race1", "Lumiar_Luminosa", "carro12", "ferrari", 359), true);
			
			assertEqual(rally.setParticipantResultInRace("race2", "Abel_Aguiar", "carro1", "ferrari", 443), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Bruno_Bala", "carro2", "ferrari", 470), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Carlos_Cruz", "carro3", "ferrari", 380), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Diogo_Delgado", "carro4", "ferrari", 497), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Ernesto_Esmeraldo", "carro5", "ferrari", 245), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Fernando_Fernandes", "carro6", "ferrari", 379), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Guilherme_Goncalves", "carro7", "ferrari", 337), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Hugo_Helicopetero", "carro8", "ferrari", 332), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Ilias_Igual", "carro9", "ferrari", 360), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Joao_Julio", "carro10", "ferrari", 238), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Karmen_Karpito", "carro11", "ferrari", 261), true);
			assertEqual(rally.setParticipantResultInRace("race2", "Lumiar_Luminosa", "carro12", "ferrari", 276), true);
			
			assertEqual(rally.setParticipantResultInRace("race3", "Abel_Aguiar", "carro1", "ferrari", 432), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Bruno_Bala", "carro2", "ferrari", 424), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Carlos_Cruz", "carro3", "ferrari", 449), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Diogo_Delgado", "carro4", "ferrari", 443), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Ernesto_Esmeraldo", "carro5", "ferrari", 273), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Fernando_Fernandes", "carro6", "ferrari", 404), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Guilherme_Goncalves", "carro7", "ferrari", 209), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Hugo_Helicopetero", "carro8", "ferrari", 302), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Ilias_Igual", "carro9", "ferrari", 301), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Joao_Julio", "carro10", "ferrari", 390), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Karmen_Karpito", "carro11", "ferrari", 393), true);
			assertEqual(rally.setParticipantResultInRace("race3", "Lumiar_Luminosa", "carro12", "ferrari", 370), true);

			
			rally.listResults("race1");
			rally.listResults("wrc");
	
	);
	
	
end TestRally