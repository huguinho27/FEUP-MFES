class TestRally
/* Class from the example */

operations

	protected assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
  			IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
		)
	post expected = actual;
	
	
	public static main: () ==> ()
	main() == 
	(
			dcl testClass : TestRally := new TestRally();
			IO`print("Rally Test"); 			
			testClass.testRallyCreation();
			testClass.testAddAndDeleteCompetition();
			testClass.testAddAndDeleteTrack();
			testClass.testAddAndDeleteRace();
			testClass.testAddAndDeletePilot();
			testClass.testAddAndDeleteVehicle();
			testClass.testAddAndDeleteSponsor();
			testClass.testAddAndDeleteTeam();
			testClass.testAddAndDeltePilotInTeam();
			testClass.testAddAndDeleteSponsorInTeam();
			testClass.testAddAndDeleteVehicleInTeam();
	
	);

	public testRallyCreation: () ==> ()
	testRallyCreation() == 
	(
			dcl rally: Rally := new Rally();
			assertEqual(isofclass(Rally, rally), true);	
	);
	
	public testAddAndDeleteCompetition: () ==> ()
	testAddAndDeleteCompetition() == 
	(
			dcl rally: Rally := new Rally();
		
			--testing adding new competition, and adding the same with diferente description
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Competition, rally.addCompetition("f1", "formula 1")), true);
			assertEqual(rally.addCompetition("wrc", "comar"), false);
			
			--testing delete and delete again
			assertEqual({} subset rally.deleteCompetition("wrc"), true);
			assertEqual(rally.deleteCompetition("wrc"), false);
	);
	
	public testAddAndDeleteTrack: () ==> ()
	testAddAndDeleteTrack() == 
	(
			dcl rally: Rally := new Rally();
			
			--testing adding track
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			assertEqual(isofclass(Track, rally.addTrack("estoril", "algarve", 123)), true);
			
			--testing delete and delete again
			assertEqual(rally.deleteTrack("montecarlo"), true);
			assertEqual(rally.deleteTrack("montecarlo"), false);
	);
	
	public testAddAndDeleteRace: () ==> ()
	testAddAndDeleteRace() ==
	(
			dcl rally: Rally := new Rally();
				
			assertEqual(isofclass(Competition, rally.addCompetition("wrc", "wrc rally")), true);
			assertEqual(isofclass(Track, rally.addTrack("montecarlo", "italia", 123)), true);
			
			--test add non existing values
			assertEqual(rally.addRaceToCompetition("cabomRace", "cabomCompetition", "cabomTrack", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(rally.addRaceToCompetition("cabomRace", "wrc", "cabomTrack", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(rally.addRaceToCompetition("cabomRace", "cabomCompetition", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			
			--real add
			assertEqual(isofclass(Race, rally.addRaceToCompetition("cabomRace", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31))), true);
			
			--already exists test
			assertEqual(rally.addRaceToCompetition("cabomRace", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			
			--test date conflicts
			assertEqual(rally.addRaceToCompetition("cabomRaceOther", "wrc", "montecarlo", mk_RallyUtils`Date(2017, 12,31)), false);
			assertEqual(isofclass(Race, rally.addRaceToCompetition("cabomRaceOther", "wrc", "montecarlo", mk_RallyUtils`Date(2018,01,01))), true);
			
			--test deleteTrack
			assertEqual(isofclass(Race, rally.deleteTrack("montecarlo")), true);
			
			--test deleteRace
			assertEqual(rally.deleteRace("cabomRaceOther"), true);
			assertEqual(rally.deleteRace("cabomRace"), true);
			assertEqual(rally.deleteRace("cabomRace"), false);
			assertEqual(rally.deleteRace("otherRace"), false);
			
			--test deleteTrack again
			assertEqual(rally.deleteTrack("montecarlo"), true);
	);
	
	public testAddAndDeletePilot: () ==> ()
	testAddAndDeletePilot() == 
	(
			dcl rally: Rally := new Rally();
		
			--testing adding new pilot, adding the same with diferent values, and adding other
			assertEqual(isofclass(Pilot, rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 12,31), <Male>)), true);
			assertEqual(rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 11,30), <Female>), false);
			assertEqual(isofclass(Pilot, rally.addPilot("Mariana Figueiredo", mk_RallyUtils`Date(1996, 02,28), <Female>)), true);
			
			--deleting pilots
			assertEqual(rally.deletePilot("Miguel Alves"), true);
			assertEqual(rally.deletePilot("Mariana Figueiredo"), true);
			assertEqual(rally.deletePilot("Miguel Alves"), false);
			assertEqual(rally.deletePilot("Mariana Figueiredo"), false);
	);
	
	public testAddAndDeleteVehicle: () ==> ()
	testAddAndDeleteVehicle() == 
	(
			dcl rally: Rally := new Rally();
			
			--testing adding new vehicle, adding the same with diferent values, and adding other
			assertEqual(isofclass(Vehicle, rally.addVehicle("carrao", "bmw", "gtx", "tr-23-23")), true);
			assertEqual(rally.addVehicle("carrao", "porsche", "911", "tu-12-13"), false);
			assertEqual(isofclass(Vehicle, rally.addVehicle("espetaculo", "bmw", "gtx", "tr-23-42")), true);
			
		
			--deleting pilots
			assertEqual(rally.deleteVehicle("carrao"), true);
			assertEqual(rally.deleteVehicle("espetaculo"), true);
			assertEqual(rally.deleteVehicle("carrao"), false);
			assertEqual(rally.deleteVehicle("espetaculo"), false);
	);
	
	public testAddAndDeleteSponsor: () ==> ()
	testAddAndDeleteSponsor() ==
	(
			dcl rally: Rally := new Rally();
	
			--testing adding new sponsor, adding the same with diferent values, and adding other
			assertEqual(isofclass(Sponsor, rally.addSponsor("michellin", "pneus e tal..")), true);
			assertEqual(rally.addSponsor("michellin", "pneus e tal.. e mais umas"), false);
			assertEqual(isofclass(Sponsor, rally.addSponsor("continental", "mais pneus e tal..")), true);
			
			--deleting pilots
			assertEqual(rally.deleteSponsor("michellin"), true);
			assertEqual(rally.deleteSponsor("continental"), true);
			assertEqual(rally.deleteSponsor("michellin"), false);
			assertEqual(rally.deleteSponsor("continental"), false);
	);
	
	public testAddAndDeleteTeam: () ==> ()
	testAddAndDeleteTeam() ==
	(
			dcl rally: Rally := new Rally();
	
			--testing adding new sponsor, adding the same with diferent values, and adding other
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			assertEqual(rally.addTeam("ferrari"), false);
			assertEqual(isofclass(Team, rally.addTeam("red bull")), true);
			
			--deleting Teams
			assertEqual(rally.deleteTeam("ferrari"), true);
			assertEqual(rally.deleteTeam("red bull"), true);
			assertEqual(rally.deleteTeam("ferrari"), false);
			assertEqual(rally.deleteTeam("red bull"), false);
	);
	
	public testAddAndDeltePilotInTeam: () ==> ()
	testAddAndDeltePilotInTeam() ==
	(
			dcl rally: Rally := new Rally();
				
			--add team and pilot
			assertEqual(isofclass(Pilot, rally.addPilot("Miguel Alves", mk_RallyUtils`Date(1996, 12,31), <Male>)), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addPilotToTeam("ferreira", "red bull"), false);
			assertEqual(rally.addPilotToTeam("Miguel Alves", "red bull"), false);
			assertEqual(rally.addPilotToTeam("ferreira", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addPilotToTeam("Miguel Alves", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deletePilotFromTeam("Miguel Alves", "red bull"), false);
			assertEqual(rally.deletePilotFromTeam("ferreira", "ferrari"), false);
			assertEqual(rally.deletePilotFromTeam("Miguel Alves", "ferrari"), true);
	);
	
	public testAddAndDeleteSponsorInTeam: () ==> ()
	testAddAndDeleteSponsorInTeam() ==
	(
			dcl rally: Rally := new Rally();
	
			--add team and sponsor
			assertEqual(isofclass(Sponsor, rally.addSponsor("Michellin", "fazem pneus")), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addSponsorToTeam("continental", "red bull"), false);
			assertEqual(rally.addSponsorToTeam("Michellin", "red bull"), false);
			assertEqual(rally.addSponsorToTeam("continental", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addSponsorToTeam("Michellin", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deleteSponsorFromTeam("Michellin", "red bull"), false);
			assertEqual(rally.deleteSponsorFromTeam("ferreira", "ferrari"), false);
			assertEqual(rally.deleteSponsorFromTeam("Michellin", "ferrari"), true);

	);
	
	public testAddAndDeleteVehicleInTeam: () ==> ()
	testAddAndDeleteVehicleInTeam() ==
	(
			dcl rally: Rally := new Rally();
			
			--add vehicle and team
			assertEqual(isofclass(Vehicle, rally.addVehicle("carrao", "maclaren", "p8", "ii-99-99")), true);
			assertEqual(isofclass(Team, rally.addTeam("ferrari")), true);
			
			--testar nao existentes
			assertEqual(rally.addVehicleToTeam("carraozito", "red bull"), false);
			assertEqual(rally.addVehicleToTeam("carrao", "red bull"), false);
			assertEqual(rally.addVehicleToTeam("carraozito", "ferrari"), false);
			
			--testar adicionar
			assertEqual(rally.addVehicleToTeam("carrao", "ferrari"), true);
			
			--testar delete
			assertEqual(rally.deleteVehicleFromTeam("carraozito", "red bull"), false);
			assertEqual(rally.deleteVehicleFromTeam("carrao", "red bull"), false);
			assertEqual(rally.deleteVehicleFromTeam("carrao", "ferrari"), true);		
	);
	
	
end TestRally