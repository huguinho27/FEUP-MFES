/**
 * Rally Class, Application Scope
 */

class Rally

types 
	public String = seq of char;
	public CompetitionSet = set of Competition;
	public TrackSet = set of Track;


instance variables
	private competitions: CompetitionSet;
	private tracks: TrackSet;
	
	
operations
	/**
	 * Rally constructor, creates empty set of Competitions and tracks. returns self.
	 */
	public Rally: () ==> Rally
	Rally() == (competitions := {}; tracks := {}; return self);
	
	/**
	 * COMPETITION SCOPE
	 */
	/**
	 * Rally addCompetition, creates new Competion with a name (identifier) and a season
	 * adds the Competition to the set of Competitions and returns that set.
	 */
	public addCompetition: String * nat ==> CompetitionSet
	addCompetition(newCompName, newCompSeason) == 
	(
		if Utils`checkIfExistsCompetition(newCompName, competitions) = false
		then 
		(
			competitions := competitions union {new Competition(newCompName, newCompSeason)};
		);
		return competitions
	)
	post competitions = competitions;
	
	/**
	 * Rally edit Competition, searchs for the competition name (identifier) and edits the 
	 * season to the new value. Returns the set of Competitions
	 */	
	public editCompetition: String * nat ==> CompetitionSet
	editCompetition(compName, newCompSeason) == 
	(
	
		for all competition in set competitions do
		(
			if Utils`equalString(competition.getName(), compName) 
			then 
			(
				competition.editSeason(newCompSeason);
				return competitions
			)
		);
		return competitions;
	);
	
	/**
	 * Rally delete Competition, searchs for the competition name (identifier) and deletes the 
	 * competition from the set. Returns the set of Competitions.
	 */	
	public deleteCompetition: String ==> CompetitionSet
	deleteCompetition(compName) ==
	(
		for all competition in set competitions do
		(
			if Utils`equalString(competition.getName(), compName) 
			then 
			(
				competitions := competitions \ {competition};
				return competitions
			)
		);
		return competitions;
	);
	
	/**
	 * getCompetitions, returns the competition set.
	 */
	 public getCompetitions: () ==> CompetitionSet
	 getCompetitions() == return competitions;
	 
	/**
	 * TRACK SCOPE
	 */
	 
	 /**
		* addTrack, creates a new track with name, location and distance, adds to tracks
		* returns the set of tracks.
		*/
	 public addTrack: String * String * real ==> TrackSet
	 addTrack(name, location, distance) == 
	 (
			if Utils`checkIfExistsTrack(name, tracks) = false
			then 
			(
				tracks := tracks union {new Track(name, location, distance)};
			);
			return tracks
		);		
		
	 /**
		* getTracks, returns the track set.
		*/
	 public getTracks: () ==> TrackSet
	 getTracks() == return tracks;

end Rally





