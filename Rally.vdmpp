/**
 * Rally Class, Application Scope
 */

class Rally

types 
	public String = seq of char;
	public CompetitionSet = set of Competition;
	public TrackSet = set of Track;
	public RaceSet = set of Race;
	public PilotSet = set of Pilot;
	public ParticipantSet = set of Participant;
	public TeamSet = set of Team;
	public VehicleSet = set of Vehicle;
	public SponsorSet = set of Sponsor;


instance variables
	private competitions: CompetitionSet;
	private tracks: TrackSet;
	private races: RaceSet;
	private pilots: PilotSet;
	private participants: ParticipantSet;
	private teams: TeamSet;
	private sponsors: SponsorSet;
	private vehicles: VehicleSet;
	
	
operations
	/**
	 * Rally constructor, creates empty set of Competition, Track, Race, Pilot, Team, Participant, Vehicle and Sponsor.
	 */
	public Rally: () ==> Rally
	Rally() == 
	(
		competitions := {}; 
		tracks := {}; 
		races := {};
		pilots := {}; 
		teams := {}; 
		participants := {}; 
		vehicles := {};
		sponsors := {};
		return self
	)
	post competitions = {} and tracks = {} and races = {} and	pilots = {} and teams = {} and participants = {} and vehicles = {} and sponsors = {};
	
	/**
	 * COMPETITION SCOPE
	 */
	/**
	 * addCompetition, Rally addCompetition, creates new Competion with a name (identifier) and a season
	 * adds the Competition to the set of Competitions and returns that set.
	 * cannot create competition if exists already.
	 */
	public addCompetition: String * String ==> ?
	addCompetition(newCompName, newCompDescription) == 
	(
		if RallyUtils`checkIfExistsCompetition(newCompName, competitions) = nil
		then 
		(
			dcl compTemp: Competition := new Competition(newCompName, newCompDescription);
			competitions := competitions union {compTemp};
			return compTemp
		);
		return false
	);

	
	/**
	 * deleteCompetition, Rally delete Competition, searchs for the competition name (identifier) and deletes the 
	 * competition from the set. Returns the set of Competitions, or false.
	 */	
	public deleteCompetition: String ==> ?
	deleteCompetition(compName) ==
	(
		for all competition in set competitions do
		(
			if RallyUtils`equalString(competition.getName(), compName) 
			then 
			(
				competitions := competitions \ {competition};
				return competitions
			)
		);
		return false;
	);
	
	 
	/**
	 * TRACK SCOPE
	 */
	 
	/**
	 * addTrack, creates a new track with name, location and distance, adds to tracks
	 * returns the set of tracks.
	 */
	public addTrack: String * String * real ==> ?
	addTrack(name, location, distance) == 
	(
		if RallyUtils`checkIfExistsTrack(name, tracks) = nil
		then 
		(
			dcl newTrack: Track := new Track(name, location, distance);
			tracks := tracks union {newTrack};
			return newTrack;
		);
		return false
	);

	/**
	 * deleteTrack, deletes a track from the set of track.
	 * cannot delete if does not exist or if it is bound to a Race.
	 */
	public deleteTrack: String ==> ?
	deleteTrack(name) ==
	(
		dcl tempTrack : ? := RallyUtils`checkIfExistsTrack(name, tracks);
		dcl tempRace : ?;
		
		--check if exists at all
		if tempTrack = nil then return false;

		--check if exists in any race
		tempRace := RallyUtils`checkIfExistsTrackInRace(name, races);
		if tempRace <> nil then (return tempRace;)
		else 
		(
			tracks := tracks \ {tempTrack};
			return true;	
		);		
	);
		
	 
	/**
	 * RACE SCOPE
	 */
	/**
	 *	addRaceToCompetition, adds a race to a competition according to the following requierments:
	 *  -the competition must exist
	 *  -the race must not exist 
	 *  -the track must exist
	 *  -the competition can only have one race in one day
	 *  -the date must be valid and not exist a race in the same track in the same day
	 */ 
	 public addRaceToCompetition: String * String * String * RallyUtils`Date ==> ?
	 addRaceToCompetition(raceName, competitionName, trackName, date) == 
	 (
	 		dcl tempTrack : ? := RallyUtils`checkIfExistsTrack(trackName, tracks);
	 		dcl tempComp : ? := RallyUtils`checkIfExistsCompetition(competitionName, competitions);	
	 		
	 		dcl race : Race;
	 		dcl competition : Competition;
	 		dcl track : Track;
	 		
	 		if RallyUtils`checkIfExistsRace(raceName, races) <> nil
	 		then return false;
	 		
	 		if tempTrack = nil
	 		then return false;
			track := tempTrack;
	 		
	 		if tempComp = nil
	 		then return false;
 			competition  := tempComp;
	 
	 		for all competitionLoop in set competitions do
	 		(
	 			for all raceLoop in set competitionLoop.getRaces() do
	 			(
	 				--already checked above, to delete
	 				if RallyUtils`equalString(raceLoop.getName(), raceName) 
	 				then return false;
	 				
	 				if RallyUtils`equalString(raceLoop.getTrack().getName(), trackName) and RallyUtils`equalDate(raceLoop.getDate(), date)
	 				then return false;
	 			) 			
	 		);
	 			 		
	 		for all raceCheck in set competition.getRaces() do
	 		(
	 				if RallyUtils`equalDate(raceCheck.getDate(), date) then return false;
	 		);
 			
 			
 			race := new Race(raceName, track, date);
 			races := races union {race};
 			competition.addRace(race);
 			return race;
	 );
	 
	 /**
	  * deleteRace, deletes a race from the set of races and from all the competitions which this race is bound.
	  * cannot delete if does not exist.
	  */
	 public deleteRace: String ==> bool
	 deleteRace(raceName) ==
	 (
	 		dcl raceTemp: ? := RallyUtils`checkIfExistsRace(raceName, races);
	 		dcl race : Race;
	 		
	 		if raceTemp = nil then return false;
	 		
	 		race := raceTemp;
	 		races := races \ {race};
	 		
	 		for all competitionLoop in set competitions do
	 		(
	 			competitionLoop.deleteRace(race);		
	 		);
	 		
	 		return true;
	 );
	 
	/**
	 * PILOT SCOPE
	 */
	/**
	 * addPilot, adds a Pilot to the set of pilots.
	 * cannot add if already exists.
	 */
	public addPilot: String * RallyUtils`Date * Pilot`genderType ==> ?
	addPilot(name, bday, gender) ==
	(
		if RallyUtils`checkIfExistsPilot(name, pilots) <> nil
		then return false
		else 
		(
			dcl pilot : Pilot := new Pilot(name, bday, gender);
			
			pilots := pilots union {pilot};
			return pilot;
		);
	);
	/**
	 * deletePilot, deletes a Pilot from the set of pilots and from the set of pilots bound to a team.
	 * cannot delete if does not exist or if it is bound to a participant result.
	 */
	public deletePilot: String ==> bool
	deletePilot(name) == 
	(
		dcl tempPilot : ? := RallyUtils`checkIfExistsPilot(name, pilots);
		dcl pilot : Pilot;
		
		if tempPilot = nil then return false else pilot := tempPilot;
	
		for all participant in set participants do 
		(
			if RallyUtils`equalString(participant.getPilot().getName(), name) then return false;
		);
		
		pilots := pilots \ {pilot};
		
		for all team in set teams do
		(
			team.deletePilot(pilot);
		);
		
		return true;
	);

 	
 	
 	
 	/**
	 * VEHICLE SCOPE
	 */
	/**
	 * addVehicle, adds a Vehicle to the set of vehicles.
	 * cannot add if already exists.
	 */
	public addVehicle: String * String * String * String ==> ?
	addVehicle(name, brand, model, plate) ==
	(
		if RallyUtils`checkIfExistsVehicle(name, vehicles) <> nil
		then return false
		else 
		(
			dcl vehicle : Vehicle := new Vehicle(name, brand, model, plate);
			
			vehicles := vehicles union {vehicle};
			return vehicle;
		);
	);
	
	/**
	 * deleteVehicle, deletes a Vehicle from the set of vehicles and from the set of vehicles bound to a team.
	 * cannot delete if does not exist or if it is bound to a participant result.
	 */
	public deleteVehicle: String ==> bool
	deleteVehicle(name) == 
	(
		dcl tempVehicle : ? := RallyUtils`checkIfExistsVehicle(name, vehicles);
		dcl vehicle : Vehicle;
		
		if tempVehicle = nil then return false else vehicle := tempVehicle;
	
		for all participant in set participants do 
		(
			if RallyUtils`equalString(participant.getVehicle().getName(), name) then return false;
		);
		
		vehicles := vehicles \ {vehicle};
		
		for all team in set teams do
		(
			team.deleteVehicle(vehicle);
		);
		
		return true;
	);
	
 	
	
	/**
	 *	SPONSOR SCOPE
	 */
	/**
	 * addSponsor, adds a Sponsor to the set of sponsors.
	 * cannot add if already exists.
	 */
	public addSponsor: String * String ==> ?
	addSponsor(name, desc) == 
	(
			if RallyUtils`checkIfExistsSponsor(name, sponsors) <> nil
			then return false
			else
			(
					dcl sponsor : Sponsor :=  new Sponsor(name, desc);
					sponsors := sponsors union {sponsor};
					return sponsor;
			)
	);
	
	/**
	 * deleteSponsor, deletes a Sponsor from the set of sponsor and from the set of sponsors bound to a team.
	 * cannot delete if does not exist.
	 */
	public deleteSponsor: String ==> bool
	deleteSponsor(name) == 
	(
		dcl tempSponsor : ? := RallyUtils`checkIfExistsSponsor(name, sponsors);
		dcl sponsor : Sponsor;
		
		if tempSponsor = nil then return false else sponsor := tempSponsor;
	
		sponsors := sponsors \ {sponsor};
		
		for all team in set teams do
		(
			team.deleteSponsor(sponsor);
		);
		
		return true;
	);
	
	
	/**
	 *	TEAM SCOPE
	 */
	/**
	 * addTeam, adds a Team to the set of teams.
	 * cannot add if already exists.
	 */
	public addTeam: String ==> ?
	addTeam(teamName) ==
	(
			if RallyUtils`checkIfExistsTeam(teamName, teams) <> nil
			then return false
			else
			(
					dcl team : Team := new Team(teamName);
					teams := teams union {team};
					return team;
			);
	);
	
	/**
	 * deleteTeam, deletes a Team from the set of teams.
	 * cannot delete if does not exist or if it is bound to a participant result.
	 */
	public deleteTeam: String ==> bool
	deleteTeam(teamName) == 
	(
			dcl teamTemp : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
			dcl team: Team;
			
			if teamTemp = nil then return false else team := teamTemp;
			
			for all participant in set participants do 
			(
				if RallyUtils`equalString(participant.getTeam().getName(), teamName) then return false;
			);
			
			teams := teams \ {team};
			return true;
	);
	
	/**
	 * addPilotToTeam, adds a Pilot to a Team.
	 * only if both pilot and team exist.
	 */
	public addPilotToTeam: String * String ==> bool
	addPilotToTeam(pilotName, teamName) == 
	(
		dcl tempPilot : ? := RallyUtils`checkIfExistsPilot(pilotName, pilots);
		dcl pilot : Pilot;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempPilot = nil then return false else pilot := tempPilot;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.addPilot(pilot);
		return true;
	);
	
	/**
	 * deletePilotFromTeam, deletes a Pilot from a Team.
	 * only if both pilot and team exist.
	 */
	public deletePilotFromTeam: String * String ==> bool
	deletePilotFromTeam(pilotName, teamName) == 
	(
		dcl tempPilot : ? := RallyUtils`checkIfExistsPilot(pilotName, pilots);
		dcl pilot : Pilot;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempPilot = nil then return false else pilot := tempPilot;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.deletePilot(pilot);
		return true;
	);
	
	/**
	 * addSponsorToTeam, adds a Sponsor to a Team.
	 * only if both sponsor and team exist.
	 */
	public addSponsorToTeam: String * String ==> bool
	addSponsorToTeam(sponsorName, teamName) == 
	(
		dcl tempSponsor : ? := RallyUtils`checkIfExistsSponsor(sponsorName, sponsors);
		dcl sponsor : Sponsor;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempSponsor = nil then return false else sponsor := tempSponsor;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.addSponsor(sponsor);
		return true;
	);

	/**
	 * deleteSponsorFromTeam, deletes a Pilot from a Team.
	 * only if both sponsor and team exist.
	 */	
	public deleteSponsorFromTeam: String * String ==> bool
	deleteSponsorFromTeam(sponsorName, teamName) == 
	(
		dcl tempSponsor : ? := RallyUtils`checkIfExistsSponsor(sponsorName, sponsors);
		dcl sponsor : Sponsor;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempSponsor = nil then return false else sponsor := tempSponsor;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.deleteSponsor(sponsor);
		return true;
	);
	
	/**
	 * addVehicleToTeam, adds a Vehicle to a Team.
	 * only if both vehicle and team exist.
	 */
	public addVehicleToTeam: String * String ==> bool
	addVehicleToTeam(vehicleName, teamName) == 
	(
		dcl tempVehicle : ? := RallyUtils`checkIfExistsVehicle(vehicleName, vehicles);
		dcl vehicle : Vehicle;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempVehicle = nil then return false else vehicle := tempVehicle;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.addVehicle(vehicle);
		return true;
	);
	
	/**
	 * deleteVehicleFromTeam, deletes a Vehicle from a Team.
	 * only if both vehicle and team exist.
	 */
	public deleteVehicleFromTeam: String * String ==> bool
	deleteVehicleFromTeam(vehicleName, teamName) == 
	(
		dcl tempVehicle : ? := RallyUtils`checkIfExistsVehicle(vehicleName, vehicles);
		dcl vehicle : Vehicle;
		
		dcl tempTeam : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
		dcl team : Team;
		
		if tempVehicle = nil then return false else vehicle := tempVehicle;
		if tempTeam = nil then return false else team := tempTeam;
		
		team.deleteVehicle(vehicle);
		return true;
	);
	
	/**
	 *	PARTICIPANT SCOPE
	 */
 /**
  *	setParticipantResultInRace, sets a new map key value, participant -> result, to a race, only if the following requierments are followed:
  * -verify if pilot is not running in the same day
  * -verify if vehicle is not running in the same day
  * -verify if the car and the pilot belongs in the team
  * -the pilot and the vehicle cannot run in the same race (already verified in restriction above)
  */
  public setParticipantResultInRace: String * String * String * String  * real ==> bool
  setParticipantResultInRace(raceName, pilotName, vehicleName, teamName, resultTime) == 
  (
  		dcl raceTemp : ? := RallyUtils`checkIfExistsRace(raceName, races);
  		dcl pilotTemp : ? := RallyUtils`checkIfExistsPilot(pilotName, pilots);
  		dcl vehicleTemp : ? := RallyUtils`checkIfExistsVehicle(vehicleName, vehicles);
  		dcl teamTemp : ? := RallyUtils`checkIfExistsTeam(teamName, teams);
  		
  		dcl race : Race;
  		dcl pilot : Pilot;
  		dcl vehicle : Vehicle;
  		dcl team : Team;
  		dcl result : ResultTime;
  		dcl participant : Participant;
  		
  		if raceTemp = nil then return false else race := raceTemp;
  		if pilotTemp = nil then return false else pilot := pilotTemp;
  		if vehicleTemp = nil then return false else vehicle := vehicleTemp;
  		if teamTemp = nil then return false else team := teamTemp;
  		
  		for all raceLoop in set races do
  		(
  				for all participantLoop in set dom raceLoop.getResults() do
  				(
  						if RallyUtils`equalString(pilot.getName(), participantLoop.getPilot().getName()) and RallyUtils`equalDate(race.getDate(), raceLoop.getDate())
  						then return false;
  						
   						if RallyUtils`equalString(vehicle.getName(), participantLoop.getVehicle().getName()) and RallyUtils`equalDate(race.getDate(), raceLoop.getDate())
  						then return false;					
  				);
  		);
  		
  		--probablly to delete
  		for all participantLoop in set dom race.getResults() do
  		(
  				if RallyUtils`equalString(pilot.getName(), participantLoop.getPilot().getName()) then return false;
  				if RallyUtils`equalString(vehicle.getName(), participantLoop.getVehicle().getName()) then return false;
  		
  		);
  		
  		if not pilot in set team.getPilots() then return false;
  		if not vehicle in set team.getVehicles() then return false;
  		
  		result := new ResultTime(resultTime);
  		participant := new Participant(pilot, team, vehicle);
  		
  		participants := participants union {participant};
  		
  		race.addResult(participant, result);
  		
  		return true;
  );
  
	/**
	 * deletes a map key value, participant and result, from a race,
	 * only if that corresponding pilot, race, participant and result exist.
	 */
  public deletePilotParticipantFromRace: String * String ==> bool
  deletePilotParticipantFromRace(pilotName, raceName) == 
  (
  		dcl raceTemp : ? := RallyUtils`checkIfExistsRace(raceName, races);
  		dcl participantTemp : ?;
  		
			dcl race : Race;
			dcl participant : Participant;
  		
			if raceTemp = nil then return false else race := raceTemp;
  		
  		participantTemp := RallyUtils`checkIfExistsParticipant(pilotName, dom race.getResults());
  		
  		if participantTemp = nil then return false else participant := participantTemp;
  	
  
  		participants := participants \ {participant};
  		
  		race.deleteResult(participant);
  		
  		return true;
  );
  
	/**
	 * listResults, lists a ordered Table of results from a event, either a Competition or a Race.
	 * searches for Competitions first.
	 */
  public listResults: String ==> ()
  listResults(eventName) ==
  (
  		IO`print(eventName);
  		skip;
  );
  
	/**
	 * listApplication, lists the whole Rally Application.
	 */
  public listApplication: () ==> ()
  listApplication() ==
  (
  		skip;
  );
  
	/**
	 * listCalendar, lists a ordered table of the next scheduled matches.
	 */
  public listCalendar: () ==> ()
  listCalendar() ==
  (
  		skip;
	);
  
	 
	

	
	

end Rally





