class Team

types
	public String = seq of char;
	public PilotSet = set of Pilot;
	public SponsorSet = set of Sponsor;
	public VehicleSet = set of Vehicle;

instance variables
	private name: String;
	private pilotSet: PilotSet;
	private sponsorSet: SponsorSet;
	private vehicleSet: VehicleSet;
	
operations
	public Team: String ==> Team
	Team(tName) == 
	(
		name := tName;
		pilotSet := {};
		sponsorSet := {};
		vehicleSet := {};
		return self;
	);
	
	public getName: () ==> String
	getName() == return name
	post RESULT = name;
	
	public getPilots(): () ==> PilotSet
	getPilots() == return pilotSet
	post RESULT = pilotSet;
	
	public getSponsorSet: () ==> SponsorSet
	getSponsorSet() == return sponsorSet
	post RESULT = sponsorSet;
	
	public getVehicleSet: () ==> VehicleSet
	getVehicleSet() == return vehicleSet
	post RESULT = vehicleSet;
	
	public addPilot: Pilot ==> ()
	addPilot(newPilot) == pilotSet := pilotSet union {newPilot}
	post newPilot in set pilotSet;
	
	public deletePilot: Pilot ==> ()
	deletePilot(newPilot) == pilotSet := pilotSet \ {newPilot}
	pre newPilot in set pilotSet
	post newPilot not in set pilotSet;
	
	public addSponsor: Sponsor ==> ()
	addSponsor(newSponsor) == sponsorSet := sponsorSet union {newSponsor}
	pre newSponsor not in set sponsorSet
	post newSponsor in set sponsorSet;
	
	public deleteSponsor: Sponsor ==> ()
	deleteSponsor(newSponsor) == sponsorSet := sponsorSet \ {newSponsor}
	pre newSponsor in set sponsorSet
	post newSponsor not in set sponsorSet;
	
	public addVehicle: Vehicle ==> ()
	addVehicle(newVehicle) == vehicleSet := vehicleSet union {newVehicle}
	pre newVehicle not in set vehicleSet
	post newVehicle in set vehicleSet;
	
	public deleteVehicle: Vehicle ==> ()
	deleteVehicle(newVehicle) == vehicleSet := vehicleSet \ {newVehicle}
	pre newVehicle in set vehicleSet
	post newVehicle not in set vehicleSet;

end Team